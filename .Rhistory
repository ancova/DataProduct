sqrt(deviance(fit))
sd(fit$residuals))
sd(fit$residuals)
str(fit)
(fit$residuals)
sd(fit$residuals)
summary(fit)$sigma
data(mtcars)
View(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit3 <- lm(y~x)
mean(y)
beta0 <- fit3$coef[1]
beta1 <- fit3$coef[2]
y5 <- beta0+beta1*3
ly5 <- y5+qt(0.975,length(mtcars$wt-2))*se2
y5+qt(0.975,length(mtcars$wt-2))*se2
x2 <- x/2
fit6 <- lm(y~x2)
summary(fit6)
data(mtcars)
x <- mtcars$mpg
mean(x)
lenght(x)
length(x)
mu <- mean(x)
mu+c(-1,1)*qt(0.95,n-1)*se(x)/sqrt(n-1)
n <- length(x)
mu+c(-1,1)*qt(0.95,n-1)*se(x)/sqrt(n-1)
??"standard error"
?var
mu+c(-1,1)*qt(0.95,n-1)*sqrt(var(x)/(n-1))
qt(0.95,n-1)
qnorm(0.05)
# ques2
x4 <- mtcars$mpg[mtcars$cyl==4]
x6 <- mtcars$mpg[mtcars$cyl==6]
t.test(x4,x6)
t.test(x4,x6,paired = FALSE)
t.test(x4,x6,paired = FALSE, alternative="two.sided", var.equal=FALSE)
3.0+c(-1,1)*qnorm(0.975)*1.1/sqrt(100)
# ques4
?qbinorm
?qbinom
pbinorm(54,100,0.05, lower.tail=FALSE)
pbinom(54,100,0.05, lower.tail=FALSE)
pbinom(54,100,0.5, lower.tail=FALSE)
?ppois
ppois(15799, 520*3, lower.tail=FALSE)
ppois(15799, 520*30, lower.tail=FALSE)
?pnorm
pnorm(0.025, 1, 4)
m1 <- 10; m2 <- 11
n1 <- n2 <- 100
s <- 4
ts <- (m2 - m1) / se
se <- s * sqrt(1 / n1 + 1 / n2)
ts <- (m2 - m1) / se
pv <- 2 * pnorm(-abs(ts))
pv
qnrom(0.95, 10, sd=4)
qnorm(0.95, 10, sd=4)
za <- qnorm(0.95, 10, sd=4)
pnrom(za, 11, sd=4, lower.tail=FALSE)
pnorm(za, 11, sd=4, lower.tail=FALSE)
za <- qnorm(0.95, 10, sd=.4)
pnorm(za, 11, sd=.4, lower.tail=FALSE)
# ques10
qnorm(0.95)-qnorm(0.80)
((qnorm(0.95)-qnorm(0.80))/(0.01/0.04))^2
((qnorm(0.95)-qnorm(0.20))/(0.01/0.04))^2
t.test(x6,x8,paired = FALSE, alternative="two.sided", var.equal=TRUE)
x8 <- mtcars$mpg[mtcars$cyl==8]
x6 <- mtcars$mpg[mtcars$cyl==6]
t.test(x6,x8,paired = FALSE, alternative="two.sided", var.equal=TRUE)
n6 <- length(x6)
n8 <- length(x8)
mu <- mean(x8)-mean(x6)
sp2 <- ((n6-1)*var(x6)+(n8-1)*var(x8))/(n6-1)/(n8-1)
se <- sqrt(sp2*(1/n6+1/n8))
pnorm(mu, 0, sd=se)
se
# quiz4
qnorm(0.95)*0.2
qnorm(0.05, 12, sd=0.2)
?qnorm
qnorm(0.05, 12, sd=0.4)
# ques2
d <- c(140-132, 138-135, 150-151, 148-146, 135-130)
?t.test
t.test(d,alternative="two.sided")
1100+c(-1,1)*qnorm(0.975)*30/3
?pbinom
pbinom(2,4,0.5, lower.tail=FALSE)
ppois
?ppois
ppois(10/1787,lambda=10/100,lower.tail=TRUE)
ppois(10/1787,lambda=1/100,lower.tail=TRUE)
ppois(10,lambda=1/100*1787,lower.tail=TRUE)
d1 <- -3
d0 <- 1
sp2 <- sqrt(.5*1.5^2+.5*1.8^2)
sp2
z <- (d1-d0)/(sp2*(sqrt(1/9+1/9)))
pz <- 2*pnrom(-abs(z))
pz <- 2*pnorm(-abs(z))
pz
z
2*pt(z,16)
zb <- qnorm(0.95)-0.01*sqrt(100)/0.04
zb
1-pnorm(zb)
qnorm(0.95)-qnrom(0.1)
qnorm(0.95)-qnorm(0.1)
(qnorm(0.95)-qnorm(0.1))*0.04/0.01
((qnorm(0.95)-qnorm(0.1))*0.04/0.01)^2
t <- (44-42.04)/12/sqrt(1/288+1/288)
t
qt(t,288*2-2)
pt(t,288*2-2)
t <- (44-42.04)/12/sqrt(1/288+1/288)
t
?pt
pt(-abs(t),288*2-2)
pnorm(t)
pnorm((44-42.04)/12*sqrt(288+288))
t <- (44-42.04)/(12*sqrt(1/288+1/288))
2*pnrom(-abs(t))
2*pnorm(-abs(t))
t <- (44-42.04)/(12*sqrt(1/288+1/288))
t
2*pnorm(-abs(t))
z
2*pt(z,16)
1100+c(-1,1)*qt(0.975,8)*30/3
swirl()
library(swirl)
swirl()
var(rpois(1000),50])
var(rpois(1000),50)
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,1])
as.integer(head(hits[,1]))
mdl <- glm(visits~date, poisson, hits)
summary(mdl)
confint(mdl,"date")
exp(confint(mdl,"date"))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(0.95, lambda)
View(hits)
mdl2 <- glm(visits~date,offset=log(visits+1, data=hits))
mdl2 <- glm(simplystats~date,family=poisson, offset=log(visits+1, data=hits))
mdl2 <- glm(simplystats~date,family=poisson, offset=log(visits+1), data=hits)
summary(mdl2)
qpois(.95, mdl2$fitted.values[704])
View(ravenData)
mdl <- glm(ravenWinNum~ravenScore, data=ravenData, family=binomial)
lodds <- predict(mdl,data.fram(ravenScore=c(0,3,6)))
lodds <- predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
library(MASS)
?shuttle
q1 <- glm(use~wind, data=shuttle, family=binomial)
summary(q1)
table(shuttle$wind)
summary(q1)$coefficients
summary(q1)$coefficients[2,1]
1/exp(summary(q1)$coefficients[2,1])
exp(summary(q1)$coefficients[2,1])
table(shuttle$use)
str(shuttle$use)
shuttle$use
unclass(shuttle$use)
2-unclass(shuttle$use)
q1 <- glm(y~wind, data=shuttle, family=binomial)
y <- 2-unclass(shuttle$use)
q1 <- glm(y~wind, data=shuttle, family=binomial)
1/exp(summary(q1)$coefficients[2,1])
shuttle$magn
q2 <- glm(y~wind+magn, data=shuttle, family=binomial)
1/exp(summary(q1)$coefficients[2,1])
1/exp(summary(q2)$coefficients[2,1])
summary(q2)
1/exp(summary(q2)$coefficients[2,1])
summary(q2)$coefficients[2,1]
1/exp(summary(q1)$coefficients[2,1])
1/exp(summary(q2)$coefficients[2,1])
summary(q1)$coefficients[2,1]
summary(q2)$coefficients[2,1]
data(InsectSprays)
head(InsectSprays)
InsectSprays$spray
q4 <- glm(count~spray, data=InsectSprays, family=poisson)
summary(q4)
exp(0.05588)
1/exp(0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lm(y[6:11]~x[6:11])
knots <- c(-5,0,5)
spLineTerms <- sapply(knots, function(knot)(x>knot)*(x-knot))
xMat <- cbind(1,x,spLineTerms)
lm(y~xMat)
y=c(1:10)
x=y-1+rnorm(10)/10
z=c(1:10)
z=z*2
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
?offset
y=c(1:100)
x=log(y-1)+rnorm(10)/10
z=c(1:100)
summary(lm(y~x+offset(z)))
x=log(y+1)+rnorm(10)/10
z=c(1:100)
summary(lm(y~x+offset(z)))
z=rep(1,100)
summary(lm(y~x+offset(z)))
z=z*4
summary(lm(y~x+offset(z)))
z=z+5
summary(lm(y~x+offset(z)))
z=z+100
summary(lm(y~x+offset(z)))
z=z/10
summary(lm(y~x+offset(z)))
install.packages("caret")
install.packages("Rtools")
install.packages("shiny")
install.packages("caret")
library(caret)
library(kernlab)
install.packages("kernlab")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
featurePlot(x=training[,1:8]), y=training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,1:8], y=training$CompressiveStrength, plot="pairs")
plot(x=1:length(training$CompressiveStrength), training$CompressiveStrength)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength)
head(training)
library(Hmisc)
?cut2
head(training)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c1)
c1 <- cut2(training$Cement,g=4)
c2 <- cut2(training[[2]],g=4)
c3 <- cut2(training[[3]],g=4)
c4 <- cut2(training[[4]],g=4)
c5 <- cut2(training[[5]],g=4)
c6 <- cut2(training[[6]],g=4)
c7 <- cut2(training[[7]],g=4)
c8 <- cut2(training[[8]],g=4)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c1)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c2)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c3)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c2)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c1)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c4)
qplot(1:length(training$CompressiveStrength), training$CompressiveStrength, colour=c5)
qplot(1:length(training$CompressiveStrength), training$FlyAsh, colour=c3)
qplot(training$FlyAsh, training$CompressiveStrength, colour=c3)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(training)
qplot(training[[5]])
summary(training[[5]])
table(training[[5]])
summary(training[[5]])
qplot(log(training[[5]]+1))
qplot(training[[5]])
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colnames(training)
colnames(training)[58:69]
preProc <- preProcess(training[,58:69],method="pca")
summary(preProc)
preProc$pcaComp
?preProcess
preProc <- preProcess(training[,58:69],method="pca",pcaComp=12)
summary(preProc)
preProc$pcaComp
preProc
out <- predict(preProc,training[,58:69])
summary(out)
head(out)
IL <- training[,58:69]
prComp <- prcomp(IL)
str(prComp)
summary(prComp)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
IL <- training[,58:69]
summary(prcomp(IL))
preProc <- preProcess(IL, method="pca",pcaComp=3)
trainPC <- predict(preProc, IL)
modelFit <- train(train$diagnosis~.,method="glm",data=trainPC)
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
trainPC <- predict(preProc, IL)
testPC <- predict(preProc,testing[,58:69])
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
# with PCA
IL <- training[,58:69]
summary(prcomp(IL))
preProc <- preProcess(IL, method="pca",pcaComp=3)
trainPC <- predict(preProc, IL)
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
install.packages("e1071")
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
library(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
install.packages("ggplot2")
library(caret)
install.packages("caret")
library(caret)
install.packages("mgcv")
install.packages("iterators")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL <- training[,58:69]
summary(prcomp(IL))
preProc <- preProcess(IL, method="pca",pcaComp=3)
trainPC <- predict(preProc, IL)
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
install.packages("e1071")
modelFit <- train(training$diagnosis~.,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis, predict(modelFit,testPC))
modelGLM <- train(training$diagnosis~.,data=IL,method="glm")
ILtesting <- testing[,c(1,58:69)]
ILtesting <- testing[,58:69]
confusionMatrix(testing$diagnosis,predict(modelGLM,ILtesting))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colnames(training)
IL <- training[,58:69]
# prComp <- prcomp(IL)
# str(prComp)
# summary(prComp)
preProc <- preProcess(IL,method="pca",thresh=0.80)
summary(preProc)
ILpca <- predict(preProc,IL)
summary(ILpca)
preProc <- preProcess(IL,method="pca",thresh=0.90)
summary(preProc)
ILpca <- predict(preProc,IL)
summary(ILpca)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
featurePlot(x=training[,1:8], y=training$CompressiveStrength, plot="pairs")
index <- 1:length(training$CompressiveStrength)
qplot(index, training$CompressiveStrength)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
ModelFit <- train(Class~., method='rpart',data=training)
print(ModelFit$finalModel)
plot(ModelFit$finalModel, uniform=TRUE, main="class tree")
text(ModelFit$finalModel, use.n=TRUE, all=TRUE, cex=1)
plot(ModelFit$finalModel, uniform=TRUE, main="class tree")
text(ModelFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
install.packages("rattle")
library(rattle)
fancyRpartPlot(ModelFit$finalModel)
library(rattle)
fancyRpartPlot(ModelFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
head(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
table(olive[[1]])
ModelFit <- train(Area~., method='rpart',data=olive)
predict(ModelFit,data=newdata)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
ModelFit <- train(Area~., method='rpart',data=olive)
head(olive)
library(pgmm)
data(olive)
head(olive)
olive = olive[,-1]
head(olive)
newdata = as.data.frame(t(colMeans(olive)))
ModelFit <- train(Area~., method='rpart',data=olive)
View(newdata)
predict(ModelFit,data=newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(trainSA)
modelFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl, method='glm', family='binomial',data=trainSA)
ped <- predict(modelFit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,ped)
ped0 <- predict(modelFit, trainSA)
ped1 <- predict(modelFit, testSA)
missClass(trainSA$chd,ped0)
missClass(testSA$chd,ped1)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
summary(vowel.train$y)
summary(vowel.test$y)
trainy <- factor(vowel.train$y)
summary(vowel.train$y)
str(vowel.train$y)
str(trainy)
testy <- factor(vowel.test$y)
str(testy)
train <- vowel.train[,-1]
test <- vowel.test[,-1]
?varlmp
library(caret)
?varlmp
?varImp
modFit <- train(trainy~., data=train, method='rf', prox=TRUE)
varImp(modFit)
setwd("K:/MOOCs - Data Science Specialization/9. Developing Data Products/CourseProject")
library(shiny)
runApp()
runApp(displayMode = 'showcase')
runApp()
library("devtools", lib.loc="C:/Program Files/R/R-3.1.1/library")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='ancova', token='1ADA89245D95DAFC6478D90579C48733', secret='rayr8tG44X5mn3f87aArTIg3QhKA4DQcpLXO8jEJ')
deployApp()
